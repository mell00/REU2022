}else{
right_lim = max(k_ends)
}
prelim_neighborhood = full_data[left_lim:right_lim]
left_neighbor = k_ends[random_num]
right_neighbor = k_ends[random_num+2]
if(ar == 1){
constraint = (3 - 1)
}else{
constraint = (2*ar-1)
}
lr_limit = left_neighbor+constraint
rl_limit = right_neighbor-constraint
exclusions = sort(c(full_data[1:lr_limit], full_data[rl_limit:max(k_ends)]))
final_neighborhood = setdiff(prelim_neighborhood, exclusions)
if(length(final_neighborhood) > 1){
new_location = sample(final_neighborhood, 1)
k_ends_less = k_ends[-(random_num+1)]
final_k_ends = sort(c(k_ends_less, new_location))
return(final_k_ends)
}else if(length(final_neighborhood) == 1){
new_location = final_neighborhood
k_ends_less = k_ends[-(random_num+1)]
final_k_ends = sort(c(k_ends_less, new_location))
return(final_k_ends)
}
else{
return("jiggle failure")
}
}
#function to propose a new breakpoint set (also returns qs and step type)
newEnds<-function(k_ends, make_k, murder_k){
u_step = runif(1) #random number from 0 to 1 taken from a uniform distribution for selecting step
if(ar == 1){
constraint = 5
}else{
constraint = ar * 4
}
if(max(diff(k_ends)) >= constraint & length(k_ends) < 3 | max(diff(k_ends)) >= constraint & u_step <= make_k){
type = "add"
a.count <<- a.count + 1
k_ends_new = barMake(k_ends) #make
#setting up qs for ratio
q1 = murder_k/(length(k_ends_new)-2)
n_free = length(freeObservations(k_ends,ma))
q2 = make_k/n_free
} else if(u_step > make_k & u_step <= (make_k + murder_k)){
type = "sub"
s.count <<- s.count + 1
k_ends_new = barMurder(k_ends) #murder
#setting up qs for ratio
n_free = length(freeObservations(k_ends_new,ma))
q1 = make_k/n_free
q2 = murder_k/(length(k_ends)-2)
} else {
move_u = runif(1)
if(move_u < jump_p){
type = "move"
m.count <<- m.count + 1
k_ends_new = barMove(k_ends) #jump
#fake qs because they cancel
q1 = 1
q2 = 1
}else{
type = "jiggle"
j.count <<- j.count + 1
k_ends_new = barJiggle(percent, k_ends) #jiggle
if(k_ends_new[[1]] == "jiggle failure"){
k_ends_new = k_ends
}
#fake qs because they cancel
q1 = 1
q2 = 1
}
}
return(list(k_ends_new, q1, q2, type))
}
#setting up counters for burn-in Metropolis-Hastings
type = "0"
a.count <<- 0
s.count <<- 0
m.count <<- 0
j.count <<- 0
add.accept.count <<- 0
sub.accept.count <<- 0
move.accept.count <<- 0
jiggle.accept.count <<- 0
#getting constants for qs for burn-in Metropolis-Hastings
starting_bkpts = length(k_ends) - 1 #most probable number of breakpoints based on starting info
starting_nfree = length(freeObservations(k_ends,ma)) #most probable n_free based on starting info
starting_ttl = starting_bkpts + starting_nfree #total to get percentages
make_k = make_murder_p * (starting_nfree/starting_ttl) #proportion for make
murder_k = make_murder_p * (starting_bkpts/starting_ttl) #proportion for murder
if(progress == TRUE){
writeLines("\nBeginning burn period.")
burn_progress <- txtProgressBar(min = 0, max = burn_in, style = 3)
}
#Burn Metropolis Hasting
for(i in 1:burn_in){
old_loglik = fitMetrics(k_ends, full_data) #gets log likelihood for existing breakpoints
k_and_q = newEnds(k_ends, make_k, murder_k)
k_ends_new = k_and_q[[1]]
q1 = k_and_q[[2]]
q2 = k_and_q[[3]]
theta_new = mvrnorm(n=1,mu=theta_list,Sigma=sigma_mtrx,tol = 1e-6, empirical = FALSE,EISPACK = FALSE)
new_loglik = fitMetrics(k_ends_new, full_data)
#birth and death ratios
product_runs = c()
old_new_product_birth = function(k){
for (j in k){
product_runs = append(product_runs,(n-(3*ma-(q1+1)(2*ma + j))))
}
return(prod(product_runs))
}
product_death = function(k){
for (j in k){
product_runs = append(product_runs,(n-3*ma-q1*2*ma + j))
}
return(prod(product_runs))
}
old_new_product_death = function(k){
for (j in k){
product_runs = append(product_runs,(n-3*ma-(q1-1)*(2*ma)+j))
}
return(prod(product_runs))
}
prior = NA
birth_old_to_new_ratio = (factorial(num_of_bkpts+1)*q2(dpois(k_ends_new,lambda)))/(old_new_product_birth(num_of_bkpts)*prior)
birth_new_to_old_ratio = (factorial(num_of_bkpts)*q1(dpois(k_ends,lambda)))/(product_death(num_of_bkpts)*prior)
death_new_to_old_ratio = (factorial(num_of_bkpts)*q2*(dpois(k_ends,lambda)))/(product_death(num_of_bkpts)*prior)
death_old_to_new_ratio = (factorial(num_of_bkpts-1)*make_k*(dpois(k_ends_new,lambda)))/(old_new_product_death(num_of_bkpts)*prior)
#
#end of birth and death ratios
delta_bic = (-2*new_loglik + log(n)*(length(k_ends_new)-1)*(3+ma)) - (-2*old_loglik + log(n)*(length(k_ends)-1)*(3+ma))
ratio = (-1*delta_bic/2) + (log(q1*dnorm(length(k_ends_new)-2,epsilon_list[ma],init_sigma2)) - log(q2*dnorm(length(k_ends)-2,epsilon_list[ma],init_sigma2))) #both dnorms are the same, make sure that this is correct
u_ratio = log(runif(1)) #random number from 0 to 1 taken from a uniform distribution and then log transformed
if(abs(delta_bic) == Inf){ #safe guard against random models creating infinite ratios
k_ends <<- k_ends #old
} else if(ratio > u_ratio) {
k_ends <<- k_ends_new #new
} else {
k_ends <<- k_ends #old
}
if(progress == TRUE){
setTxtProgressBar(burn_progress, i)
}
}
#initializing matrices/storage objects for final Metropolis-Hasting
all_k_best = data.frame(matrix(ncol=(length(k_ends)-2),nrow=0))
if(fit_storage == TRUE){
bar_v = 0
bar_beta = 0
fit = 0
all_fits = data.frame()
all_MSE = data.frame()
}
all_BIC = data.frame()
accept_count = 0
#setting up counters for final Metropolis-Hasting
type = "0"
a.count <<- 0
s.count <<- 0
m.count <<- 0
j.count <<- 0
add.accept.count <<- 0
sub.accept.count <<- 0
move.accept.count <<- 0
jiggle.accept.count <<- 0
#getting constants for qs for final Metropolis-Hasting
starting_bkpts = length(k_ends) - 1 #most probable number of breakpoints based on starting info
starting_nfree = length(freeObservations(k_ends,ma))
burn_in = 50
make_murder_p = 0.5
percent = 0.02
lambda = 1
tao = abs(1)
bs(1), alpha = 0, mu = 1.5, jump_p = 0.25, ma = 1, progress = TRUE, fit_storage = TRUE)
jump_p = 0.25
ma = 1
mu = 1.5,
mu = 1.5
alpha = 0
fit_storage = TRUE
progress = TRUE
burn_in = 50
make_murder_p = 0.5
lambda = 1
percent = 0.02
y = rnorm(1,0,1)
mu = 1
alpha = .5
epsilon = c(rnorm(1,0,1))
epsilon = function(t){ # t MUST be greater than or equal to 2
for (i in 2:t){
epsilon[i-1] = rnorm(1,0,1)
}
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon(2) # + .............
}
y[i]= mu + epsilon[1] + alpha*epsilon(2) # + .............
epsilon[1]
epsilon = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 2:t){
epsilon_t[i-1] = rnorm(1,0,1)
}
}
y[i]= mu + epsilon + alpha*epsilon(2) # + .............
epsilon = rnorm(1,0,1)
y[i]= mu + epsilon + alpha*epsilon(2)
epsilon = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 2:t){
epsilon_t[i-1] = rnorm(1,0,1)
}
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon(2) # + .............
}
epsilon = rnorm(1,0,1)
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon(2) # + .............
}
epsilon = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 2:t){
epsilon_t[i-1] = rnorm(1,0,1)
}
}
mu = 1
y = rnorm(1,0,1)
alpha = .5
epsilon = rnorm(1,0,1)
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon(2) # + .............
}
mu = 1
y = rnorm(1,0,1)
alpha = .5
epsilon = rnorm(1,0,1)
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 2:t){
epsilon_t[i-1] = rnorm(1,0,1)
}
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
mu = 1
y = rnorm(1,0,1)
alpha = .5
epsilon = rnorm(1,0,1)
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
mu = 1
y = rnorm(1,0,1)
alpha = .5
epsilon = rnorm(1,0,1)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
epsilon_t(2)
epsilon_t(2)
mu
epsilon
alpha
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
return(epsilon_t[t])
}
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
epsilon_t[i] = rnorm(1,0,1)
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
return(epsilon_t[t])
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
beta=-1
y=rnorm(1,0,1)
for(i in 2:32){y[i]=beta*y[i-1]+rnorm(1,0,1)}
for(i in 33:90){y[i]=beta*y[i-1]+rnorm(1,0,3)}
beta=-1
y=rnorm(1,0,1)
for(i in 2:32){y[i]=beta*y[i-1]+rnorm(1,0,1)}
for(i in 33:90){y[i]=beta*y[i-1]+rnorm(1,0,3)}
beta=-1
y=rnorm(1,0,1)
for(i in 2:32){y[i]=beta*y[i-1]+rnorm(1,0,1)}
for(i in 33:90){y[i]=beta*y[i-1]+rnorm(1,0,3)}
beta=-1
y=rnorm(1,0,1)
for(i in 2:32){y[i]=beta*y[i-1]+rnorm(1,0,1)}
for(i in 33:90){y[i]=beta*y[i-1]+rnorm(1,0,3)}
beta=-1
y=rnorm(1,0,1)
for(i in 2:32){y[i]=beta*y[i-1]+rnorm(1,0,1)}
for(i in 33:90){y[i]=beta*y[i-1]+rnorm(1,0,3)}
beta=-1
y=rnorm(1,0,1)
for(i in 2:32){y[i]=beta*y[i-1]+rnorm(1,0,1)}
for(i in 33:90){y[i]=beta*y[i-1]+rnorm(1,0,3)}
beta=-1
y=rnorm(1,0,1)
for(i in 2:32){y[i]=beta*y[i-1]+rnorm(1,0,1)}
for(i in 33:90){y[i]=beta*y[i-1]+rnorm(1,0,3)}
beta=-1
y=rnorm(1,0,1)
for(i in 2:32){y[i]=beta*y[i-1]+rnorm(1,0,1)}
for(i in 33:90){y[i]=beta*y[i-1]+rnorm(1,0,3)}
beta=-1
y=rnorm(1,0,1)
for(i in 2:32){y[i]=beta*y[i-1]+rnorm(1,0,1)}
for(i in 33:90){y[i]=beta*y[i-1]+rnorm(1,0,3)}
beta=-1
y=rnorm(1,0,1)
for(i in 2:32){y[i]=beta*y[i-1]+rnorm(1,0,1)}
for(i in 33:90){y[i]=beta*y[i-1]+rnorm(1,0,3)}
beta=-1
y=rnorm(1,0,1)
for(i in 2:32){y[i]=beta*y[i-1]+rnorm(1,0,1)}
for(i in 33:90){y[i]=beta*y[i-1]+rnorm(1,0,3)}
beta=-1
y=rnorm(1,0,1)
for(i in 2:32){y[i]=beta*y[i-1]+rnorm(1,0,1)}
for(i in 33:90){y[i]=beta*y[i-1]+rnorm(1,0,3)}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
library(devtools)
#install_version("FitAR", version = "1.94", repos = "http://cran.us.r-project.org")
#library(FitAR)
library(forecast)
library(strucchange)
library(stats)
library(MASS)
par(mar=c(1,1,1,1))
setwd("/Users/mellm/github/REU2022/test_Cases")
suicide<-read.csv("suicideRatesData.csv")
attach(suicide)
plot(Year,X15.24.years)
plot(Year,X15.24.years,xlim=c(1979,2015))
plot(Year,X15.24.years,main="Distribution of BAAR Breakpoints", ylab = "Number of Iterations", xlab="Time",xaxt = "n",col="#8EDCE6")
axis(1, at=1:37, labels=1979:2015, tick=T)
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Number of Iterations", xlab="Time",xaxt = "n",col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Number of Iterations", xlab="Time",pch=19, xaxt = "n",col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Number of Iterations", xlab="Time", pch=19, xaxt = "n", cex.main= 0.5, col="#8EDCE6")
axis(1, at=1:37, labels=1979:2015, tick=T, cex.axis = 0.75)
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Number of Iterations", xlab="Time", pch=19, xaxt = "n", cex.main= 0.75, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Number of Iterations", xlab="Time", pch=19, xaxt = "n", cex.main= 0.5, col="#8EDCE6")
axis(2, cex.lab=1.5, cex.axis=0.75)
library("forecast")
axis(1, at=1:37, labels=1979:2015, tick=T, cex.axis = 0.75)
axis(2, cex.lab=1.5, cex.axis=0.75)
axis(2, tick=T, cex.lab=1.5, cex.axis=0.75)
axis(1, at=1:37, labels=1979:2015, cex.axis = 0.75)
axis(2, tick=T, cex.lab=1.5, cex.axis=0.75)
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Number of Iterations", xlab="Time", pch=19, cex.main= 0.5, col="#8EDCE6")
axis(1, at=length(Year), xlab="Time", labels=1979:2015, cex.axis = 0.75)
axis(2, ylab = "Number of Iterations", cex.lab=1.5, cex.axis=0.75)
length(Year)
length(1979:2015)
axis(1, at=length(Year), xlab="Time", labels=1979:2016, cex.axis = 0.75)
axis(1, at=1:37, xlab="Time", labels=1979:2015, cex.axis = 0.75)
axis(2, ylab = "Number of Iterations", cex.lab=1.5, cex.axis=0.75)
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", pch=19, cex.main= 0.5, col="#8EDCE6")
axis(1, at=1:37, xlab="Time", labels=1979:2015, cex.axis = 0.75)
axis(2, ylab = "Number of Iterations", cex.lab=1.5, cex.axis=0.75)
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlab="Years", pch=19, cex.main= 0.5, col="#8EDCE6")
axis(1, at=1:37, xlab="Time", labels=1979:2015, cex.axis = 0.75)
axis(2, ylab = "Number of Iterations", cex.lab=1.5, cex.axis=0.75)
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", x="Years", pch=19, cex.main= 0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlabel="Years", pch=19, cex.main= 0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlab = "Years", pch=19, cex.main= 0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlab = "Years", pch=19, cex.main= 0.5, col="#8EDCE6")
library("forecast")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", pch=19, cex.main= 0.5, col="#8EDCE6")
x_list
x_list = c(Year)
y_list = c(X15.24.years)
x_list
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlim = x_list, ylim = y_list, pch=19, cex.main= 0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlim = c(x_list), ylim = c(y_list), pch=19, cex.main= 0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlim = c(Year), ylim = c(X15.24.years), pch=19, cex.main= 0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlim = c(1979,2015), ylim = c(0,max(X15.24.years) + 100), pch=19, cex.main= 0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlim = c(1979,2015), ylim = c(0,max(X15.24.years)), pch=19, cex.main= 0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlim = c(1979,2015), ylim = c(0,max(X15.24.years) - 5000), pch=19, cex.main= 0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlim = c(1979,2015), ylim = c(0,max(X15.24.years) - 500), pch=19, cex.main= 0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlim = c(1979,2015), ylim = c(min(X15.24.years) - 100,max(X15.24.years) + 100), pch=19, cex.main= 0.5, col="#8EDCE6")
axis(1, at=1:37, xlab="Time", labels=1979:2015, cex.axis = 0.75)
axis(2, ylab = "Number of Iterations", cex.lab=1.5, cex.axis=0.75)
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlim = c(1979,2015), ylim = c(min(X15.24.years) - 100,max(X15.24.years) + 100), xlab="Time", ylab = "Number of Iterations",  pch=19, cex.main= 0.5, col="#8EDCE6")
axis(2, labels = "Number of Iterations", cex.lab=1.5, cex.axis=0.75)
axis(1, at=1979:2015, labels="Time", labels=1979:2015, cex.axis = 0.75)
max(X15.24.years) + 100
axis(1, at=1:37, labels="Time", labels=1979:2015, cex.axis = 0.75)
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlim = c(1979,2015), ylim = c(min(X15.24.years) - 100,max(X15.24.years) + 100), xlab="Time", ylab = "Number of Iterations",  pch=19, cex.main= 0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlim = c(1979,2015), ylim = c(min(X15.24.years) - 100,max(X15.24.years) + 100), xlab="Time", ylab = "Number of Iterations",  pch=19, cex.main= 0.5, col="#8EDCE6")
title("Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlab="X values",
ylab="Y=X")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlim = c(1979,2015), ylim = c(min(X15.24.years) - 100,max(X15.24.years) + 100), xlab="Time", ylab = "Number of Iterations",  pch=19, cex.main= 0.5, col="#8EDCE6")
mtext("Suicide Count", side=1, line=3, cex.lab=1,las=2, col="black")
mtext("Suicide Count", side=1, line=3, cex.lab=1,las=2, col="black")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlim = c(1979,2015), ylim = c(min(X15.24.years) - 100,max(X15.24.years) + 100),  pch=19, cex.main= 0.5, col="#8EDCE6")
mtext("Suicide Count", side=1, line=3, cex.lab=1,las=2, col="black")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", xlim = c(1979,2015), ylim = c(min(X15.24.years) - 100,max(X15.24.years) + 100),  pch=19, cex.main= 0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = Count, xlim = c(1979,2015), ylim = c(min(X15.24.years) - 100,max(X15.24.years) + 100),  pch=19, cex.main= 0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Count", xlim = c(1979,2015), ylim = c(min(X15.24.years) - 100,max(X15.24.years) + 100),  pch=19, cex.main= 0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Suicide Count", xlim = c(1979,2015), ylim = c(min(X15.24.years) - 100,max(X15.24.years) + 100),  pch=19, cex.main= 0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Suicide Count", xlim = c(1979,2015), ylim = c(min(X15.24.years) - 100,max(X15.24.years) + 100),  pch=19, cex.main= 0.5, cex.axis=0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Suicide Count", xlim = c(1979,2015), ylim = c(min(X15.24.years) - 100,max(X15.24.years) + 100),  pch=19, cex.main= 0.5, cex.axis=0.75, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Suicide Count", xlim = c(1979,2015), ylim = c(0,max(X15.24.years) + 100),  pch=19, cex.main= 0.5, cex.axis=0.75, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Suicide Count", xlim = c(1979,2015), ylim = c(0,max(X15.24.years) + 5000),  pch=19, cex.main= 0.5, cex.axis=0.75, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Suicide Count", xlim = c(1979,2015), ylim = c(0,max(X15.24.years) + 4000),  pch=19, cex.main= 0.5, cex.axis=0.75, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Suicide Count", xlim = c(1979,2015), ylim = c(0,max(X15.24.years) + 2000),  pch=19, cex.main= 0.5, cex.axis=0.75, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Suicide Count", xlim = c(1979,2015), ylim = c(0,max(X15.24.years) + 4000),  pch=19, cex.main= 0.5, cex.axis=0.75, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Suicide Count", xlim = c(1979,2015), ylim = c(0,max(X15.24.years) + 4000),  pch=19, cex.main= 0.75, cex.axis=0.5, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Suicide Count", xlim = c(1979,2015), ylim = c(0,max(X15.24.years) + 4000),  pch=19, cex.main= 0.75, cex.axis=0.5, cex.lab=0.75, col="#8EDCE6")
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Suicide Count", xlim = c(1979,2015), ylim = c(0,max(X15.24.years) + 4000),  pch=19, cex.main= 0.75, cex.axis=0.75, cex.lab=0.75, col="#8EDCE6")
single_model <- arima(suicide$X15.24.years, order=c(3,0,0))
single_fitted <- fitted(single_model)
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Suicide Count", xlim = c(1979,2015), ylim = c(0,max(X15.24.years) + 4000),  pch=19, cex.main= 0.75, cex.axis=0.75, cex.lab=0.75, col="#8EDCE6")
mtext("Suicide Count", side=1, line=3, cex.lab=1,las=2, col="black")
lines(c(1979:2015), single_fitted, col="#9EECF7", lty=1)
plot(Year,X15.24.years,main="Suicide Count Among People Ages 15-24 in the U.S.A.: 1979 to 2015", ylab = "Suicide Count", xlim = c(1979,2015), ylim = c(0,max(X15.24.years) + 4000),  pch=19, cex.main= 0.75, cex.axis=0.75, cex.lab=0.75, col="#8EDCE6")
lines(c(1979:2015), single_fitted, col="#9EECF7", lty=1)
arima(suicide$X15.24.years, order=c(3,0,0))
lines(c(1979:2015), X15.24.years, col="#9EECF7", lty=1)
lines(c(1979:2015), X15.24.years, col="#331832", lty=1)
points(c(1979:2015), X15.24.years, col="#331832", lty=1)
points(c(1979:2015), X15.24.years, col="#331832", lty=1, pch=16)
lines(c(1979:2015), single_fitted, col="#9EECF7", lty=1)
points(c(1979:2015), single_fitted, col="#9EECF7", pch=15)
lines(c(1979:2015), X15.24.years, col="#331832", lty=1)
points(c(1979:2015), X15.24.years, col="#331832", lty=1, pch=16)
test1$Fits[which(test1$Breakpoints[,1] == 11 & test1$NumBkpts == 1),]
