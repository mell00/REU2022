beta1 = .2
beta2 = .7
stdev=0.5
y= rnorm(1,0,1)
for( i in 1:10){
y[i] = beta1*y[i-1]+rnorm(1,0,stdev)}
for( i in 11:90){
y[i] = beta2*y[i-1]+rnorm(1,0,stdev)}
data_45=y
time = c(1:90)
test_data_45 = data.frame(time, data_45)
return(test_data_45)
}
iterations=1000
runs=10
L=matrix(NA,nrow=iterations,ncol=runs)
A=NA
M=NA
B=NA
for(i in 1:runs){
y=test_data_45()
current_data = y
break_p = breakpoints(current_data[,2] ~ current_data[,1], breaks = 5, h = 0.1)
starting_breakpoints = break_p$breakpoints
test1=baar(starting_breakpoints,1:90,y[,2],iterations)
print(i)
L[,i]=test1$NumBkpts
M[i]=length(starting_breakpoints[!is.na(starting_breakpoints)])
A=c(A,(unlist(test1$Breakpoints))) #Baar location of breakpoints
B=c(B,(starting_breakpoints)) #B-P
}
test_data_45 = function(){
beta1 = .2
beta2 = .7
stdev=1
y= rnorm(1,0,1)
for( i in 1:70){
y[i] = beta1*y[i-1]+rnorm(1,0,stdev)}
for( i in 71:90){
y[i] = beta2*y[i-1]+rnorm(1,0,stdev)}
data_45=y
time = c(1:90)
test_data_45 = data.frame(time, data_45)
return(test_data_45)
}
iterations=1000
runs=10
L=matrix(NA,nrow=iterations,ncol=runs)
A=NA
M=NA
B=NA
for(i in 1:runs){
y=test_data_45()
current_data = y
break_p = breakpoints(current_data[,2] ~ current_data[,1], breaks = 5, h = 0.1)
starting_breakpoints = break_p$breakpoints
test1=baar(starting_breakpoints,1:90,y[,2],iterations)
print(i)
L[,i]=test1$NumBkpts
M[i]=length(starting_breakpoints[!is.na(starting_breakpoints)])
A=c(A,(unlist(test1$Breakpoints))) #Baar location of breakpoints
B=c(B,(starting_breakpoints)) #B-P
}
library(devtools)
library(strucchange)
library(stats)
library(MASS)
par(mfrow=c(1,1))
setwd("\\Users\\mellm\\github\\REU2022\\Variations_of_bars")
source("bama1.R")
library(devtools)
library(strucchange)
library(stats)
library(MASS)
par(mfrow=c(1,1))
setwd("\\Users\\mellm\\github\\REU2022\\Variations_of_bars")
source("bama1.R")
library(devtools)
library(strucchange)
library(stats)
library(MASS)
par(mfrow=c(1,1))
setwd("\\Users\\mellm\\github\\REU2022\\Variations_of_bars")
source("bama1.R")
setwd("\\Users\\mellm\\github\\REU2022\\Variations_of_bars")
source("bama1.R")
test_data_45(){
mu = 1
y = rnorm(1,0,1)
alpha = .5
epsilon = rnorm(1,0,1)
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
return(epsilon_t[t])
}
test_data_45(){
mu = 1
y = rnorm(1,0,1)
alpha = .5
epsilon = rnorm(1,0,1)
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
return(epsilon_t[t])
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
test_data_45(){
mu = 1
y = rnorm(1,0,1)
alpha = .5
epsilon = rnorm(1,0,1)
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
return(epsilon_t[t])
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
data_45=y
time = c(1:90)
test_data_45 = data.frame(time, data_45)
}
test_data_45(){
mu = 1
y = rnorm(1,0,1)
alpha = .5
epsilon = rnorm(1,0,1)
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
return(epsilon_t[t])
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
data_45=y
time = c(1:90)
test_data_45 = data.frame(time, data_45)
}
iterations=1000
runs=100
L=matrix(NA,nrow=iterations,ncol=runs)
A=NA
M=NA
B=NA
for(i in 1:runs){
y=test_data_45()
current_data = y
break_p = breakpoints(current_data[,2] ~ current_data[,1], breaks = 5, h = 0.1)
starting_breakpoints = break_p$breakpoints
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
print(i)
L[,i]=test1$NumBkpts
M[i]=length(starting_breakpoints[!is.na(starting_breakpoints)])
A=c(A,(unlist(test1$Breakpoints))) #Bama location of breakpoints
B=c(B,(starting_breakpoints)) #B-P
}
for(i in 1:runs){
y=test_data_45()
current_data = y
break_p = breakpoints(current_data[,2] ~ current_data[,1], breaks = 5, h = 0.1)
starting_breakpoints = break_p$breakpoints
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
print(i)
L[,i]=test1$NumBkpts
M[i]=length(starting_breakpoints[!is.na(starting_breakpoints)])
A=c(A,(unlist(test1$Breakpoints))) #Bama location of breakpoints
B=c(B,(starting_breakpoints)) #B-P
}
test_data_45(){
mu = 1
y = rnorm(1,0,1)
alpha = .5
epsilon = rnorm(1,0,1)
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
return(epsilon_t[t])
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
data_45=y
time = c(1:90)
test_data_45 = data.frame(time, data_45)
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
test_data_45(){
mu = 1
y = rnorm(1,0,1)
alpha = .5
epsilon = rnorm(1,0,1)
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
return(epsilon_t[t])
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
data_45=y
time = c(1:90)
test_data_45 = data.frame(time, data_45)
return(test_data_45)
}
test_data_45 = function(){
mu = 1
y = rnorm(1,0,1)
alpha = .5
epsilon = rnorm(1,0,1)
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
return(epsilon_t[t])
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
data_45=y
time = c(1:90)
test_data_45 = data.frame(time, data_45)
return(test_data_45)
}
iterations=1000
runs=100
L=matrix(NA,nrow=iterations,ncol=runs)
A=NA
M=NA
B=NA
for(i in 1:runs){
y=test_data_45()
current_data = y
break_p = breakpoints(current_data[,2] ~ current_data[,1], breaks = 5, h = 0.1)
starting_breakpoints = break_p$breakpoints
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
print(i)
L[,i]=test1$NumBkpts
M[i]=length(starting_breakpoints[!is.na(starting_breakpoints)])
A=c(A,(unlist(test1$Breakpoints))) #Bama location of breakpoints
B=c(B,(starting_breakpoints)) #B-P
}
break_p$breakpoints
current_data = y
current_data
break_p
current_data[,1]
current_data[,2]
breakpoints(current_data[,2] ~ current_data[,1], breaks = 5, h = 0.1)
install.packages("autostsm")
library(autostsm)
library(devtools)
#install_version("FitAR", version = "1.94", repos = "http://cran.us.r-project.org")
#library(FitAR)
library(strucchange)
library(stats)
library(MASS)
par(mfrow=c(1,1))
setwd("\\Users\\sarah\\OneDrive\\Documents\\REU\\REU2022-master\\Variations_of_bars")
source("Baar.R") #should be fixedaar updated version
#NOTES: burn-in=100 CHANGE on Fixed BAAR
#iterations = 1000
#runs =100
test_data_45 = function(){
beta1 = .7
beta2= .3
stdev=1
y= rnorm(1,0,1)
for( i in 2:45){
y[i] = beta1*y[i-1]+rnorm(1,0,stdev)}
for( i in 46:90){
y[i] = beta2*y[i-1]+rnorm(1,0,stdev)}
data_45=y
time = c(1:90)
test_data_45 = data.frame(time, data_45)
return(test_data_45)
}
iterations=1000
runs=100
L=matrix(NA,nrow=iterations,ncol=runs)
A=NA
M=NA
B=NA
for(i in 1:runs){
y=test_data_45()
current_data = y
break_p = breakpoints(current_data[,2] ~ current_data[,1], breaks = 5, h = 0.1)
starting_breakpoints = break_p$breakpoints
test1=baar(starting_breakpoints,1:90,y[,2],iterations)
print(i)
L[,i]=test1$NumBkpts
M[i]=length(starting_breakpoints[!is.na(starting_breakpoints)])
A=c(A,(unlist(test1$Breakpoints))) #Baar location of breakpoints
B=c(B,(starting_breakpoints)) #B-P
}
A2=A[!is.na(A)]
B2=B[!is.na(B)]
mean(L)
sd(L)
mean(M)
sd(M)
plot(apply(L,1,mean))
hist(A2, breaks=100, main="BAAR Breakpoints", ylab="Number of iterations (out of interations*runs)", xlab="Time")#50= 5000(iterations*runs)
abline(v=45, col="red",lwd = 3)# change v to match breakpoints
hist(B2, breaks=100, main="Bai-Perron Breakpoints", xlab="time") #(frenquency/runs)
library(devtools)
#install_version("FitAR", version = "1.94", repos = "http://cran.us.r-project.org")
#library(FitAR)
library(strucchange)
library(stats)
library(MASS)
par(mfrow=c(1,1))
setwd("\\Users\\sarah\\OneDrive\\Documents\\REU\\REU2022-master\\Variations_of_bars")
source("Baar.R") #should be fixedaar updated version
#NOTES: burn-in=100 CHANGE on Fixed BAAR
#iterations = 1000
#runs =100
test_data_45 = function(){
beta1 = .7
beta2= .3
stdev=1
y= rnorm(1,0,1)
for( i in 2:45){
y[i] = beta1*y[i-1]+rnorm(1,0,stdev)}
for( i in 46:90){
y[i] = beta2*y[i-1]+rnorm(1,0,stdev)}
data_45=y
time = c(1:90)
test_data_45 = data.frame(time, data_45)
return(test_data_45)
}
iterations=1000
runs=5
L=matrix(NA,nrow=iterations,ncol=runs)
A=NA
M=NA
B=NA
for(i in 1:runs){
y=test_data_45()
current_data = y
break_p = breakpoints(current_data[,2] ~ current_data[,1], breaks = 5, h = 0.1)
starting_breakpoints = break_p$breakpoints
test1=baar(starting_breakpoints,1:90,y[,2],iterations)
print(i)
L[,i]=test1$NumBkpts
M[i]=length(starting_breakpoints[!is.na(starting_breakpoints)])
A=c(A,(unlist(test1$Breakpoints))) #Baar location of breakpoints
B=c(B,(starting_breakpoints)) #B-P
}
A2=A[!is.na(A)]
B2=B[!is.na(B)]
mean(L)
sd(L)
mean(M)
sd(M)
plot(apply(L,1,mean))
hist(A2, breaks=100, main="BAAR Breakpoints", ylab="Number of iterations (out of interations*runs)", xlab="Time")#50= 5000(iterations*runs)
abline(v=45, col="red",lwd = 3)# change v to match breakpoints
hist(B2, breaks=100, main="Bai-Perron Breakpoints", xlab="time") #(frenquency/runs)
#percentage graphs "saved graphs"
#Step1: Change the axis to match percents
#Step2: Save onto REU folder shared as in the following order BAAR(orBP)_beta1value_beta2value_sdvalue_@breakpointlocation
#example BAAR7_3_1_@45
#example BP7_3_1_@45
hist(A2, breaks=100, main="BAAR Breakpoints", ylab="Percentage of time location chosen", xlab="Time",yaxt="n")
axis(2, at=c(0,1000,2000,3000,4000),labels=c(0,1000/100000,2000/100000,3000/100000,4000/100000)) #100,000=(iterations*runs)
abline(v=45, col="red",lwd = 3)# change v to match breakpoints
hist(B2, breaks=100, main="Bai-Perron Breakpoints", ylab= "Percentage of time location chosen ", xlab="Time",yaxt="n")
axis(2, at=c(0,3.5,7,10.5,14),labels=c(0,3.5/100,7/100,10.5/100,14/100))#(frenquency/runs)
abline(v=45, col="red",lwd = 3)# change v to match breakpoints
M
A2
plot( apply(L,1,mean) type="l", col="red" )
plot( apply(L,1,mean), type="l", col="red" )
plot(apply(L,1,mean), type="l", col="red" )
par(new=TRUE)
plot(apply(M,1,mean) type="l", col="green" )
plot(apply(L,1,mean), type="l", col="red" )
par(new=TRUE)
plot(apply(M,1,mean) type="l", col="green" )
plot(apply(L,1,mean), type="l", col="red" )
par(new=TRUE)
plot(apply(M,1,mean), type="l", col="green" )
plot(apply(L,1,mean), type="l", col="red" )
par(new=TRUE)
plot(apply(M,1,abs(mean)), type="l", col="green" )
plot(apply(M,1,mean(M)), type="l", col="green" )
mean(M)
plot(apply(M,1,mean(M)), type="l", col="green" )
plot(apply(L,1,mean), type="l", col="red" )
plot(apply(L,1,mean), type="l", col="red" )
plot(apply(L,1,mean), type="l", col="red" )
par(new=TRUE)
plot(apply(M,1,mean(M)), type="l", col="green" )
plot(apply(M,1,mean, type="l", col="green" ))
plot(apply(M,1,mean(M), type="l", col="green" ))
plot(apply(M,1,mean(M)), type="l", col="green" ))
plot(apply(M,1,mean(M)), type="l", col="green" )
#percentage graphs "saved graphs"
#Step1: Change the axis to match percents
#Step2: Save onto REU folder shared as in the following order BAAR(orBP)_beta1value_beta2value_sdvalue_@breakpointlocation
#example BAAR7_3_1_@45
#example BP7_3_1_@45
hist(A2, breaks=100, main="BAAR Breakpoints", ylab="Percentage of time location chosen", xlab="Time",yaxt="n")
hist(B2, breaks=100, main="Bai-Perron Breakpoints", xlab="time") #(frenquency/runs)
abline(v=45, col="red",lwd = 3)# change v to match breakpoints
L
M
plot(M, coffts, type="l", col="green")
stsm_detect_breaks(stsm_estimate(current_data),current_data)
L=matrix(NA,nrow=iterations,ncol=runs)
break_p = stsm_detect_breaks(stsm_estimate(current_data[,2]),current_data)
stsm_estimate(current_data[,2])
test_data_45 = data.frame(time, data_45)
y=test_data_45()
y
current_data
current_data[,2]
break_p = stsm_detect_breaks(stsm_estimate(current_data[,2]),current_data)
stsm_estimate(current_data)
current_data[1]
current_data["time"]
y=test_data_45()
current_data = y
stsm_estimate(current_data["data_45"])
break_p = stsm_detect_breaks(stsm_estimate(current_data),current_data)
current_data
y
test_data_45()
test_data_45 = function(){
mu = 1
y = rnorm(1,0,1)
alpha = .5
epsilon = rnorm(1,0,1)
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
return(epsilon_t[t])
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
data_45=y
time = c(1:90)
test_data_45 = data.frame(time, data_45)
return(test_data_45)
}
return(test_data_45)
full_data = cbind(c(1:length(as.numeric(current_data[,1]))), as.numeric(current_data[,2]))
View(full_data)
break_p = stsm_detect_breaks(stsm_estimate(current_data),current_data)
current_data = cbind(c(1:length(as.numeric(y[,1]))), as.numeric(y[,2]))
current_data
break_p = stsm_detect_breaks(stsm_estimate(current_data[,2]),current_data)
break_p = stsm_detect_breaks(stsm_estimate(current_data[,2]),current_data[,2])
breakpoints(current_data[,2] ~ current_data[,1], breaks = 5, h = 0.1)
break_p = stsm_detect_breaks(stsm_estimate(current_data[,2]),current_data[,2])
break_p = stsm_detect_breaks(stsm_estimate(current_data[,2]),current_data[,2])
current_data = data.frame(cbind(c(1:length(as.numeric(y[,1]))), as.numeric(y[,2])))
break_p = stsm_detect_breaks(stsm_estimate(current_data[,2]),current_data[,2])
break_p = stsm_detect_breaks(stsm_estimate(current_data),current_data)
current_data = data.frame(cbind(c(1:length(as.date(y[,1]))), as.numeric(y[,2])))
break_p = stsm_detect_breaks(stsm_estimate(current_data),current_data)
current_data = data.frame(cbind(c(1:length(as.Date(y[,1]))), as.numeric(y[,2])))
break_p = stsm_detect_breaks(stsm_estimate(current_data),current_data)
current_data
break_p = stsm_detect_breaks()
break_p = stsm_detect_breaks(y)
break_p = stsm_detect_breaks(y,y)
breakpoints(current_data[,2] ~ current_data[",1"], breaks = 5, h = 0.1)
starting_breakpoints = break_p$breakpoints
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
print(i)
stsm_estimate(y)
break_p = stsm_detect_breaks(y,y)
break_p = stsm_detect_breaks(y[1])
stsm_estimate(y[,1])
break_p = stsm_detect_breaks(y[1])
stsm_estimate(y[,2])
stsm_estimate(data.frame(y[,2]))
stsm_estimate(data.frame(y))
as.Date(y[,1])
y[,1] = as.Date(y[,1])
stsm_estimate(data.frame(y))
break_p = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)
break_p
break_p = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)
break_p = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)
y
break_p
break_p = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)
