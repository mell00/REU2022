B=NA
y=test_data_45()
y[,1] = as.Date(y[,1])
starting_breakpoints = which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`))
starting_breakpoints
stsm_detect_breaks(stsm_estimate(data.frame(y)),y)
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
iterations=1000
runs=10
L=matrix(NA,nrow=iterations,ncol=runs)
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
starting_breakpoints = as.data.frame(starting_breakpoints)
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
starting_breakpoints = which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`))
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
starting_breakpoints = which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[`10%_break`]))
starting_breakpoints = which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`))
!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`)
starting_breakpoints = as.numeric(which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`)))
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
print(i)
L[,i]=test1
M[i]=length(starting_breakpoints[!is.na(starting_breakpoints)])
A=c(A,(unlist(test1$Breakpoints))) #Bama location of breakpoints
B=c(B,(starting_breakpoints)) #B-P
for(i in 1:runs){
y=test_data_45()
y[,1] = as.Date(y[,1])
starting_breakpoints = as.numeric(which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`)))
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
print(i)
L[,i]=test1
M[i]=length(starting_breakpoints[!is.na(starting_breakpoints)])
A=c(A,(unlist(test1$Breakpoints))) #Bama location of breakpoints
B=c(B,(starting_breakpoints)) #B-P
}
y[,2]
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
is.atomic(starting_breakpoints)
starting_breakpoints = data.frame(which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`)))
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
starting_breakpoints = list(which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`)))
starting_breakpoints
starting_breakpoints = which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`))
is.atomic(starting_breakpoints)
starting_breakpoints = data.frame(starting_breakpoints)
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
stsm_estimate(data.frame(y)),y)[`10%_break`]
(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[`10%_break`])
stsm_detect_breaks(stsm_estimate(data.frame(y)),y)["10%_break"])
(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)["10%_break"])
starting_breakpoints = which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`))
test1=bama(starting_breakpoints[],1:90,y[,2],iterations)
starting_breakpoints = which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["`10%_break`"]]))
starting_breakpoints = which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["10%_break"]]))
(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["10%_break"]])
(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["`10%_break`"]])
starting_breakpoints = which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`))
library(devtools)
library(strucchange)
library(stats)
library(MASS)
library(autostsm)
par(mfrow=c(1,1))
setwd("\\Users\\mellm\\github\\REU2022\\Variations_of_bars")
source("bama1.R")
test_data_45 = function(){
mu = 1
y = rnorm(1,0,1)
alpha = .5
epsilon = rnorm(1,0,1)
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
return(epsilon_t[t])
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
data_45=y
time = c(1:90)
test_data_45 = data.frame(time, data_45)
return(test_data_45)
}
iterations=1000
runs=10
L=matrix(NA,nrow=iterations,ncol=runs)
A=NA
M=NA
B=NA
y=test_data_45()
y[,1] = as.Date(y[,1])
starting_breakpoints = which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`))
test1=bama(starting_breakpoints[],1:90,y[,2],iterations)
starting_breakpoints
y=test_data_45()
y[,1] = as.Date(y[,1])
starting_breakpoints = which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`))
starting_breakpoints = as.numeric(which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`)))
library(devtools)
library(strucchange)
library(stats)
library(MASS)
library(autostsm)
par(mfrow=c(1,1))
setwd("\\Users\\mellm\\github\\REU2022\\Variations_of_bars")
source("bama1.R")
test_data_45 = function(){
mu = 1
y = rnorm(1,0,1)
alpha = .5
epsilon = rnorm(1,0,1)
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
return(epsilon_t[t])
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
data_45=y
time = c(1:90)
test_data_45 = data.frame(time, data_45)
return(test_data_45)
}
iterations=1000
runs=10
L=matrix(NA,nrow=iterations,ncol=runs)
A=NA
M=NA
B=NA
y=test_data_45()
y[,1] = as.Date(y[,1])
starting_breakpoints = as.numeric(which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`)))
starting_breakpoints = which(!is.na(stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`))
stsm_estimate(data.frame(y)),y)
(stsm_estimate(data.frame(y))
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)
bkpt_start
data_45=y
y=test_data_45()
y[,1] = as.Date(y[,1])
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[[`10%_break`]]
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["`10%_break`"]]
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)$`10%_break`
starting_breakpoints = which(!is.na(bkpt_start))
starting_breakpoints = list(which(!is.na(bkpt_start)))
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[`10%_break`]
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["break_type"]]
starting_breakpoints = list(which(!is.na(bkpt_start)))
stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["break_type"]]
y=test_data_45()
y[,1] = as.Date(y[,1])
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["break_type"]]
starting_breakpoints = list(which(!is.na(bkpt_start)))
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
starting_breakpoints = list(which(!is.na(bkpt_start)))
starting_breakpoints = c(which(!is.na(bkpt_start)))
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["break_type"]]
#install.packages("devtools")
library(devtools)
library(strucchange)
library(stats)
library(MASS)
library(autostsm)
par(mfrow=c(1,1))
setwd("\\Users\\mellm\\github\\REU2022\\Variations_of_bars")
source("bama1.R")
test_data_45 = function(){
mu = 1
y = rnorm(1,0,1)
alpha = .5
epsilon = rnorm(1,0,1)
epsilon_t = function(t){ # t MUST be greater than or equal to 2
epsilon_t = c(epsilon)
for (i in 1:t){
epsilon_t[i] = rnorm(1,0,1)
}
return(epsilon_t[t])
}
for (i in 1:90){
y[i]= mu + epsilon + alpha*epsilon_t(2) # + .............
}
data_45=y
time = c(1:90)
test_data_45 = data.frame(time, data_45)
return(test_data_45)
}
iterations=1000
runs=10
L=matrix(NA,nrow=iterations,ncol=runs)
A=NA
M=NA
B=NA
y=test_data_45()
y[,1] = as.Date(y[,1])
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["break_type"]]
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
View(starting_breakpoints)
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
y=test_data_45()
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
y
y=as.list(test_data_45())
y
test1=bama(starting_breakpoints,1:90,y[,2],iterations)
print(i)
test1=bama(starting_breakpoints,1:90,y["data_45"],iterations)
print(i)
L[,i]=test1
M[i]=length(starting_breakpoints[!is.na(starting_breakpoints)])
A=c(A,(unlist(test1$Breakpoints))) #Bama location of breakpoints
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
test1=bama(starting_breakpoints,1:90,y["data_45"],iterations)
test1
y["data_45"]
y=as.list(test_data_45())
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
test1=bama(starting_breakpoints,1:90,y["data_45"],iterations)
test1
test1=bama(starting_breakpoints,length(y["data_45"]),y["data_45"],iterations)
test1
test1=bama(starting_breakpoints,length(y["data_45"]),y["data_45"],iterations, ma = 2)
test1
test1=bama(starting_breakpoints,length(y["data_45"]),y["data_45"],iterations, ma = 1)
tst1
test1
length(y["data_45"])
length(y$data_45)
test1=bama(starting_breakpoints,length(y$data_45),y["data_45"],iterations, ma = 1)
test1
test1=bama(starting_breakpoints,length(y$data_45),y$data_45,iterations, ma = 1)
test1
y$data_45
y=as.list(test_data_45()$data_45)
test1=bama(starting_breakpoints,length(y),y,iterations, ma = 1)
test1
y
y=as.list(test_data_45())
test1=bama(starting_breakpoints,length(y$time),y$data_45,iterations, ma = 1)
test1
length(y$time)
test1=bama(starting_breakpoints,length(as.numeric(y$time)),y$data_45,iterations, ma = 1)
test1
current_data
current_data[,1]
current_data[,2]
test1=bama(starting_breakpoints,length(as.numeric(current_data[,1])),current_data[,2],iterations, ma = 1)
test1
(starting_breakpoints,1:90,current_data[,2],iterations, ma = 1)
test1=bama(starting_breakpoints, 1:90, current_data[,2], iterations)
current_data=as.list(test_data_45())
test1=bama(starting_breakpoints, current_data[,1], current_data[,2], iterations)
print(i)
test1=bama(starting_breakpoints, current_data[,1], current_data[,2], iterations)
test1=bama(starting_breakpoints, 1:length(current_data[,1]), current_data[,2], iterations)
test1=bama(starting_breakpoints, 1:length(current_data[,1]), current_data[,2], iterations)
test1=bama(starting_breakpoints, 1:length(current_data[,1]), current_data[,2], iterations)
test1=bama(starting_breakpoints, 1:length(current_data[,1]), current_data[,2], iterations)
test1=bama(starting_breakpoints, 1:length(current_data[,1]), current_data[,2], iterations)
current_data=as.list(test_data_45())
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
current_data[,1]
current_data[,1]
current_data[1]
test1=bama(starting_breakpoints, 1:length(current_data[1]), current_data[2], iterations)
test1
iterations=1000
runs=10
L=matrix(NA,nrow=iterations,ncol=runs)
A=NA
M=NA
B=NA
for(i in 1:runs){
y=test_data_45()
current_data = y
current_data[,1] = as.Date(current_data[,1])
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(current_data)),current_data)[["break_type"]]
current_data=as.list(test_data_45())
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
test1=bama(starting_breakpoints, 1:length(current_data[1]), current_data[2], iterations)
print(i)
L[,i]=test1
M[i]=length(starting_breakpoints[!is.na(starting_breakpoints)])
A=c(A,(unlist(test1$Breakpoints))) #Bama location of breakpoints
B=c(B,(starting_breakpoints)) #B-P
}
test_data_45()
test_data_45()[1]
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["break_type"]]
y=as.list(test_data_45())
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
test1=bama(starting_breakpoints, 1:length(current_data[1]), current_data[2], iterations)
test1
y=test_data_45()
y[,1] = as.Date(y[,1])
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["break_type"]]
bkpt_start
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["break_type"]]
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["break_type"]]
stsm_detect_breaks(stsm_estimate(data.frame(y)),y)
y=test_data_45()
y[,1] = as.Date(y[,1])
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["break_type"]]
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
y=as.list(test_data_45())
test1=bama(starting_breakpoints, 1:length(current_data[1]), current_data[2], iterations)
print(i)
L[,i]=test1
M[i]=length(starting_breakpoints[!is.na(starting_breakpoints)])
A=c(A,(unlist(test1$Breakpoints))) #Bama location of breakpoints
y=test_data_45()
y[,1] = as.Date(y[,1])
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["break_type"]]
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
y=as.list(test_data_45())
y=as.list(test_data_45()[["data_45"]])
test1=bama(starting_breakpoints, 1:length(current_data[1]), current_data[2], iterations)
y=c(test_data_45()[["data_45"]])
y=c(test_data_45()[["data_45"]])
test1=bama(starting_breakpoints, 1:length(current_data[1]), current_data[2], iterations)
y=as.list(test_data_45())
y=as.list(test_data_45())
y[,1] = as.Date(y[,1])
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["break_type"]]
y=test_data_45()
y[,1] = as.Date(y[,1])
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["break_type"]]
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
y=as.list(y)
test1=bama(starting_breakpoints, 1:length(current_data[1]), current_data[2], iterations)
test1
test1=bama(starting_breakpoints, 1:length(y[1]), y[2], iterations)
test1
test1=bama(starting_breakpoints, y[1], y[2], iterations)
test1
y[,1]
y[,1]
y[1]
length(y[1])
length(y[2])
test1=bama(starting_breakpoints, length(y$time), y$data_45, iterations)
test1=bama(starting_breakpoints, length(y$data_45), y$data_45, iterations)
print(i)
L[,i]=test1
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
y=as.list(y)
y=test_data_45()
y[,1] = as.Date(y[,1])
bkpt_start = stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["break_type"]]
starting_breakpoints = as.list(which(!is.na(bkpt_start)))
y[,1]
test1=bama(starting_breakpoints, length(y[,1]), y[,2], iterations)
test1=bama(starting_breakpoints, 1:length(y[,1]), y[,2], iterations)
test1=bama(starting_breakpoints, 1:length(y), y, iterations)
1:length(y[1])
length(y[1])
length(y[[1]])
test1=bama(starting_breakpoints, 1:length(y[[1]]), y[[2]], iterations)
test1=bama(starting_breakpoints, 1:length(y[[1]]), y[[2]], iterations)
data.frame(y)
y
stsm_estimate(data.frame(y))
stsm_detect_breaks(stsm_estimate(data.frame(y)),y)
stsm_detect_breaks(stsm_estimate(data.frame(y)),y)[["break_type"]]
as.list(which(!is.na(bkpt_start)))
starting_breakpoints = which(!is.na(bkpt_start))
y=as.list(y)
test1=bama(starting_breakpoints, 1:length(y[[1]]), y[[2]], iterations)
print(i)
test1=bama(c(starting_breakpoints), 1:length(y[[1]]), y[[2]], iterations)
ma = floor(ma)
if(length(time) != length(data)){
return("Data and time vectors must be of equal length.")
}else if(length(data) < (6 * ma)){
return("Data insufficient for order of MA model. Try a lower order.")
}else if(make_murder_p >= 1){
return("Make/murder proportion must be less than 1.")
}else if(percent >= 0.5){
return("Percent for jiggle neighrborhood must be less than 0.5.")
}else if(jump_p > 1){
return("Jump proportion must be less than or equal to 1.")
}
library(MASS)
library(forecast)
full_data = cbind(c(1:length(as.numeric(time))), as.numeric(data)) #combining time and data inputs
data.ts = arima(full_data[1,],order=c(0,0,ma)) #fit data using ARIMA
n = length(full_data[,1]) #number of observations
k_ends <<- c(min(full_data[,1]), na.omit(k), n) #adding end points to k
init_theta_list = full_data$model$theta #draw existing theta prior from data
init_sigma2 = data.ts$sigma2
sigma_mtrx = diag(tao,length(theta_list))
init_epsilon_list = rnorm(n,0,init_sigma2) #needs to be fixed, ignore for now
par(mar=c(1,1,1,1))
setwd("/Users/mellm/github/REU2022/test_Cases")
suicide<-read.csv("suicideRatesData.csv")
suicide
suicide<-read.csv("suicideRatesData.csv")
suicide<-suicide[-which(suicide$NumberByPartyHours == 0),]
suicide<-read.csv("suicideRatesData.csv")
setwd("/Users/mellm/github/REU2022/test_Cases")
suicide<-read.csv("suicideRatesData.csv")
suicide<-suicide[-which(suicide$Suicide.Count == 0),]
suicide<-read.csv("suicideRatesData.csv")
suicide<-suicide[-which(suicide$`Suicide.Count` == 0),]
suicide<-read.csv("suicideRatesData.csv")
attach(suicide)
year
plot(year)
plot(Year)
plot(Suicide.Count)
suicide["female"]["5-14 years"]
suicide
par(mar=c(1,1,1,1))
setwd("/Users/mellm/github/REU2022/test_Cases")
suicide<-read.csv("suicideRatesData.csv")
attach(suicide)
suicide
suicide$X15.24.years
arima(suicide$X15.24.years, order=c(3,0,0))
library("forecast")
setwd("/Users/mellm/github/REU2022/")
source("ar_bai_perron.r")
source("data_for_trials.r")
single_model <- arima(suicide$X15.24.years, order=c(3,0,0))
single_fitted <- fitted(single_model)
single_fitted
single_BIC <- BIC(single_model)
suicide_bkpts<-bai_perron.ar(suicide$Year, pelican$X15.24.years, order=3, max_breaks=1)
suicide_bkpts<-bai_perron.ar(suicide$Year, suicide$X15.24.years, order=3, max_breaks=1)
suicide_bkpts$Breakpoints
suicide_bkpts$Breakpoints
attach(suicide)
cols1<-c('#006e82', '#8214a0', '#005ac8', '#00a0fa', '#fa78fa', '#14d2dc', '#aa0a3c', '#fa7850', '#0ab45a', '#f0f032', '#a0fa82', '#fae6be')
library("forecast")
setwd("/Users/mellm/github/REU2022/")
source("ar_bai_perron.r")
source("data_for_trials.r")
single_model <- arima(suicide$X15.24.years, order=c(3,0,0))
single_fitted <- fitted(single_model)
single_BIC <- BIC(single_model)
suicide_bkpts<-bai_perron.ar(suicide$Year, suicide$X15.24.years, order=3, max_breaks=1)
suicide_bkpts<-all_breakpoints(suicide$X15.24.years~suicide$Year)
suicide_result<-baar(suicide_bkpts$Breakpoints, suicide$Year, suicide$X15.24.years, 10000, 1500, jump=0.25, ar=3)
source("/Variations_of_bars/fixedbaar.1")
source("/Variations_of_bars/fixedbaar1.r")
single_model <- arima(suicide$X15.24.years, order=c(3,0,0))
setwd("/Users/mellm/github/REU2022/")
source("ar_bai_perron.r")
source("data_for_trials.r")
source("/Variations_of_bars/fixedbaar1.r")
source("Variations_of_bars/fixedbaar1.r")
single_fitted <- fitted(single_model)
single_BIC <- BIC(single_model)
suicide_bkpts<-bai_perron.ar(suicide$Year, suicide$X15.24.years, order=3, max_breaks=1)
suicide_bkpts<-all_breakpoints(suicide$X15.24.years~suicide$Year)
suicide_result<-baar(suicide_bkpts$Breakpoints, suicide$Year, suicide$X15.24.years, 10000, 1500, jump=0.25, ar=3)
suicide_result
suicide_result$NumBkpts
suicide_result$Breakpoints
#suicide_result<-readRDS("casestudy_data4.RData")
suicide_result<-readRDS("casestudy_data3.RData")
length(which(suicide_result$Breakpoints[,1] == 11)) +
length(which(suicide_result$Breakpoints[,1] == 12)) +
length(which(suicide_result$Breakpoints[,1] == 13)) +
length(which(suicide_result$Breakpoints[,1] == 14))
length(which(suicide_result$Breakpoints[,2] == 70)) +
length(which(suicide_result$Breakpoints[,2] == 71)) +
length(which(suicide_result$Breakpoints[,2] == 72))
suicide_finbkpts<-NULL
for(i in 1:ncol(suicide_result$Breakpoints)){
suicide_finbkpts<-c(suicide_finbkpts, na.omit(suicide_result$Breakpoints[,i]), recursive=T)
}
suicide_finbkpts = suicide_finbkpts+1937
hist(suicide_result$NumBkpts, breaks=c(0.5,1.5,2.5), xlim=c(0.5,2.5), ylim=c(0,10000), right=F, xlab="Number of Breaks", ylab="Number of Iterations (out of 10,000)", main="Distribution of Breakpoint Number", col="#aa0a3c")
hist(suicide_finbkpts, breaks=seq(1938.5,2016.5,1), xlim=c(1940,2015), xaxp=c(1940, 2015, 5), ylim=c(0,10000), right=F, xlab="Year", ylab="Number of Iterations (out of 10,000)", main="Distribution of Breakpoint Locations", col="#aa0a3c")
beta_to_use = suicide_result$Beta[which(suicide_result$Breakpoints[,1] == 11 & suicide_result$NumBkpts == 1)]
sigma_to_use = suicide_result$Sigma[which(suicide_result$Breakpoints[,1] == 11 & suicide_result$NumBkpts == 1)]
fits_to_use = suicide_result$Fits[which(suicide_result$Breakpoints[,1] == 11 & suicide_result$NumBkpts == 1),]
lower = apply(fits_to_use, 2, quantile, probs = 0.025, na.rm = T)
upper = apply(fits_to_use, 2, quantile, probs = 0.975, na.rm = T)
par(mfrow=c(1,2))
plot(suicide$Year, suicide$X15.24.years, ylim=c(-1,2.5), col="#aa0a3c", xaxp=c(1940, 2015, 5), pch=19, main="A. Recorded Suicides in American 15-24 year olds between 1979 and 2015: Single AR(3) Fit", xlab="Year", ylab="Count")
lines(suicide$Year, suicide$X15.24.years, col="#aa0a3c")
points(c(1938:2016), single_fitted, col="#8214a0", pch=15)
lines(c(1938:2016), single_fitted, col="#8214a0", lty=1)
plot(suicide$X15.24.years~suicide$Year, ylim=c(-1,2.5), col="#aa0a3c", xaxp=c(1940, 2015, 5), pch=19, main="B. Recorded Suicides in American 15-24 year olds between 1979 and 2015: Fit from BAAR", xlab="Year", ylab="Count")
lines(suicide$Year, suicide$X15.24.years, col="#aa0a3c")
points(c(1938:1948),colMeans(fits_to_use)[1:11], col="#00a0fa", pch=17)
lines(c(1938:1948),colMeans(fits_to_use)[1:11], col="#00a0fa", lty=1)
points(c(1949:2016),colMeans(fits_to_use)[12:79], col="#0ab45a", pch=18)
lines(c(1949:2016),colMeans(fits_to_use)[12:79], col="#0ab45a", lty=1)
lines(c(1938:1948),lower[1:11], col="#00a0fa", lty=3)
lines(c(1949:2016),lower[12:79], col="#0ab45a", lty=3)
lines(c(1938:1948),upper[1:11], col="#00a0fa", lty=3)
lines(c(1949:2016),upper[12:79], col="#0ab45a", lty=3)
